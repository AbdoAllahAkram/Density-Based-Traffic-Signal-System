
Traffic-Light-Signal.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000152  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001a6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001d8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000214  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000069a  00000000  00000000  00000234  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000570  00000000  00000000  000008ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003a8  00000000  00000000  00000e3e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000011e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000321  00000000  00000000  0000120c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000120  00000000  00000000  0000152d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000164d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 a7 00 	jmp	0x14e	; 0x14e <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#define G4 PC5


int main(void)
{
	DDRA = 0XFF;
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	8a bb       	out	0x1a, r24	; 26
	DDRC = 0XFF;
  70:	84 bb       	out	0x14, r24	; 20
	DDRD = 0X00;
  72:	11 ba       	out	0x11, r1	; 17
	setBit(DDRB, PB0);
  74:	b8 9a       	sbi	0x17, 0	; 23
	setBit(DDRB, PB1);
  76:	b9 9a       	sbi	0x17, 1	; 23
	setBit(DDRB, PB2);
  78:	ba 9a       	sbi	0x17, 2	; 23
	setBit(DDRB, PB3);
  7a:	bb 9a       	sbi	0x17, 3	; 23
	while (1)
	{
		
		if((checkBit(PIND, PD0)))
  7c:	80 9b       	sbis	0x10, 0	; 16
  7e:	09 c0       	rjmp	.+18     	; 0x92 <main+0x26>
		{
			while((checkBit(PIND, PD0)))
  80:	80 9b       	sbis	0x10, 0	; 16
  82:	fc cf       	rjmp	.-8      	; 0x7c <main+0x10>
			{
				setBit(PORTA, R1);
  84:	d8 9a       	sbi	0x1b, 0	; 27
				setBit(PORTA, R2);
  86:	db 9a       	sbi	0x1b, 3	; 27
				setBit(PORTC, Y3);
  88:	a9 9a       	sbi	0x15, 1	; 21
				setBit(PORTC, G4);
  8a:	ad 9a       	sbi	0x15, 5	; 21
	while (1)
	{
		
		if((checkBit(PIND, PD0)))
		{
			while((checkBit(PIND, PD0)))
  8c:	80 99       	sbic	0x10, 0	; 16
  8e:	fa cf       	rjmp	.-12     	; 0x84 <main+0x18>
  90:	f5 cf       	rjmp	.-22     	; 0x7c <main+0x10>
				setBit(PORTC, Y3);
				setBit(PORTC, G4);
			}
		}
		
		else if((checkBit(PIND, PD1)))
  92:	81 9b       	sbis	0x10, 1	; 16
  94:	09 c0       	rjmp	.+18     	; 0xa8 <main+0x3c>
		{
			while((checkBit(PIND, PD1)))
  96:	81 9b       	sbis	0x10, 1	; 16
  98:	f1 cf       	rjmp	.-30     	; 0x7c <main+0x10>
			{
				setBit(PORTA, R1);
  9a:	d8 9a       	sbi	0x1b, 0	; 27
				setBit(PORTC, R4);
  9c:	ab 9a       	sbi	0x15, 3	; 21
				setBit(PORTA, Y2);
  9e:	dc 9a       	sbi	0x1b, 4	; 27
				setBit(PORTC, G3);
  a0:	aa 9a       	sbi	0x15, 2	; 21
			}
		}
		
		else if((checkBit(PIND, PD1)))
		{
			while((checkBit(PIND, PD1)))
  a2:	81 99       	sbic	0x10, 1	; 16
  a4:	fa cf       	rjmp	.-12     	; 0x9a <main+0x2e>
  a6:	ea cf       	rjmp	.-44     	; 0x7c <main+0x10>
				setBit(PORTC, R4);
				setBit(PORTA, Y2);
				setBit(PORTC, G3);
			}
		}
		else if((checkBit(PIND, PD2)))
  a8:	82 9b       	sbis	0x10, 2	; 16
  aa:	09 c0       	rjmp	.+18     	; 0xbe <main+0x52>
		{
			while((checkBit(PIND, PD2)))
  ac:	82 9b       	sbis	0x10, 2	; 16
  ae:	e6 cf       	rjmp	.-52     	; 0x7c <main+0x10>
			{
				setBit(PORTC, R3);
  b0:	a8 9a       	sbi	0x15, 0	; 21
				setBit(PORTC, R4);
  b2:	ab 9a       	sbi	0x15, 3	; 21
				setBit(PORTA, Y1);
  b4:	d9 9a       	sbi	0x1b, 1	; 27
				setBit(PORTA, G2);
  b6:	dd 9a       	sbi	0x1b, 5	; 27
				setBit(PORTC, G3);
			}
		}
		else if((checkBit(PIND, PD2)))
		{
			while((checkBit(PIND, PD2)))
  b8:	82 99       	sbic	0x10, 2	; 16
  ba:	fa cf       	rjmp	.-12     	; 0xb0 <main+0x44>
  bc:	df cf       	rjmp	.-66     	; 0x7c <main+0x10>
				setBit(PORTC, R4);
				setBit(PORTA, Y1);
				setBit(PORTA, G2);
			}
		}
		else if((checkBit(PIND, PD3)))
  be:	83 9b       	sbis	0x10, 3	; 16
  c0:	09 c0       	rjmp	.+18     	; 0xd4 <main+0x68>
		{
			while((checkBit(PIND, PD3)))
  c2:	83 9b       	sbis	0x10, 3	; 16
  c4:	db cf       	rjmp	.-74     	; 0x7c <main+0x10>
			{
				setBit(PORTC, R3);
  c6:	a8 9a       	sbi	0x15, 0	; 21
				setBit(PORTA, R2);
  c8:	db 9a       	sbi	0x1b, 3	; 27
				setBit(PORTC, Y4);
  ca:	ac 9a       	sbi	0x15, 4	; 21
				setBit(PORTA, G1);
  cc:	da 9a       	sbi	0x1b, 2	; 27
				setBit(PORTA, G2);
			}
		}
		else if((checkBit(PIND, PD3)))
		{
			while((checkBit(PIND, PD3)))
  ce:	83 99       	sbic	0x10, 3	; 16
  d0:	fa cf       	rjmp	.-12     	; 0xc6 <main+0x5a>
  d2:	d4 cf       	rjmp	.-88     	; 0x7c <main+0x10>
			}
		}
		else
		{
			
			setBit(PORTA, R1);
  d4:	d8 9a       	sbi	0x1b, 0	; 27
			setBit(PORTA, R2);
  d6:	db 9a       	sbi	0x1b, 3	; 27
			setBit(PORTC, Y3);
  d8:	a9 9a       	sbi	0x15, 1	; 21
			setBit(PORTC, G4);
  da:	ad 9a       	sbi	0x15, 5	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  dc:	2f e7       	ldi	r18, 0x7F	; 127
  de:	8a e1       	ldi	r24, 0x1A	; 26
  e0:	96 e0       	ldi	r25, 0x06	; 6
  e2:	21 50       	subi	r18, 0x01	; 1
  e4:	80 40       	sbci	r24, 0x00	; 0
  e6:	90 40       	sbci	r25, 0x00	; 0
  e8:	e1 f7       	brne	.-8      	; 0xe2 <main+0x76>
  ea:	00 c0       	rjmp	.+0      	; 0xec <main+0x80>
  ec:	00 00       	nop
			_delay_ms(2000);
			PORTA = 0x00;
  ee:	1b ba       	out	0x1b, r1	; 27
			PORTC = 0x00;
  f0:	15 ba       	out	0x15, r1	; 21
		
			setBit(PORTA, R1);
  f2:	d8 9a       	sbi	0x1b, 0	; 27
			setBit(PORTC, R4);
  f4:	ab 9a       	sbi	0x15, 3	; 21
			setBit(PORTA, Y2);
  f6:	dc 9a       	sbi	0x1b, 4	; 27
			setBit(PORTC, G3);
  f8:	aa 9a       	sbi	0x15, 2	; 21
  fa:	2f e7       	ldi	r18, 0x7F	; 127
  fc:	8a e1       	ldi	r24, 0x1A	; 26
  fe:	96 e0       	ldi	r25, 0x06	; 6
 100:	21 50       	subi	r18, 0x01	; 1
 102:	80 40       	sbci	r24, 0x00	; 0
 104:	90 40       	sbci	r25, 0x00	; 0
 106:	e1 f7       	brne	.-8      	; 0x100 <main+0x94>
 108:	00 c0       	rjmp	.+0      	; 0x10a <main+0x9e>
 10a:	00 00       	nop
		
			_delay_ms(2000);
			PORTA = 0x00;
 10c:	1b ba       	out	0x1b, r1	; 27
			PORTC = 0x00;
 10e:	15 ba       	out	0x15, r1	; 21
		
			setBit(PORTC, R3);
 110:	a8 9a       	sbi	0x15, 0	; 21
			setBit(PORTC, R4);
 112:	ab 9a       	sbi	0x15, 3	; 21
			setBit(PORTA, Y1);
 114:	d9 9a       	sbi	0x1b, 1	; 27
			setBit(PORTA, G2);
 116:	dd 9a       	sbi	0x1b, 5	; 27
 118:	2f e7       	ldi	r18, 0x7F	; 127
 11a:	8a e1       	ldi	r24, 0x1A	; 26
 11c:	96 e0       	ldi	r25, 0x06	; 6
 11e:	21 50       	subi	r18, 0x01	; 1
 120:	80 40       	sbci	r24, 0x00	; 0
 122:	90 40       	sbci	r25, 0x00	; 0
 124:	e1 f7       	brne	.-8      	; 0x11e <main+0xb2>
 126:	00 c0       	rjmp	.+0      	; 0x128 <main+0xbc>
 128:	00 00       	nop

			_delay_ms(2000);
			PORTA = 0x00;
 12a:	1b ba       	out	0x1b, r1	; 27
			PORTC = 0x00;
 12c:	15 ba       	out	0x15, r1	; 21
		
			setBit(PORTC, R3);
 12e:	a8 9a       	sbi	0x15, 0	; 21
			setBit(PORTA, R2);
 130:	db 9a       	sbi	0x1b, 3	; 27
			setBit(PORTC, Y4);
 132:	ac 9a       	sbi	0x15, 4	; 21
			setBit(PORTA, G1);
 134:	da 9a       	sbi	0x1b, 2	; 27
 136:	2f e7       	ldi	r18, 0x7F	; 127
 138:	8a e1       	ldi	r24, 0x1A	; 26
 13a:	96 e0       	ldi	r25, 0x06	; 6
 13c:	21 50       	subi	r18, 0x01	; 1
 13e:	80 40       	sbci	r24, 0x00	; 0
 140:	90 40       	sbci	r25, 0x00	; 0
 142:	e1 f7       	brne	.-8      	; 0x13c <main+0xd0>
 144:	00 c0       	rjmp	.+0      	; 0x146 <main+0xda>
 146:	00 00       	nop
		
			_delay_ms(2000);
		
			PORTA = 0x00;
 148:	1b ba       	out	0x1b, r1	; 27
			PORTC = 0x00;
 14a:	15 ba       	out	0x15, r1	; 21
 14c:	97 cf       	rjmp	.-210    	; 0x7c <main+0x10>

0000014e <_exit>:
 14e:	f8 94       	cli

00000150 <__stop_program>:
 150:	ff cf       	rjmp	.-2      	; 0x150 <__stop_program>
